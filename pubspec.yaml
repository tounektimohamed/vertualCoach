name: mohamed
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=3.3.2 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
  provider: ^6.1.2

  flutter_localizations:
    sdk: flutter
  intl: any

  cached_video_player:
    git:
      url: https://github.com/vikram25897/flutter_cached_video_player
      ref: feature/gradle_version_bump
  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2
 
  cloud_firestore: ^4.15.9
  firebase_storage: ^11.6.10
  country_picker: ^2.0.15
  flutter_riverpod: ^2.0.0-dev.9
  image_picker: ^1.0.7
  flutter_contacts: ^1.1.7+1
  fluttericon: ^2.0.0
  icon: ^2.2.1
  syncfusion_flutter_charts: ^22.2.9

  uuid: ^3.0.6
  cached_network_image: ^3.2.1
  emoji_picker_flutter: ^2.1.1
  enough_giphy_flutter: ^0.4.1
  flutter_sound: ^9.2.13
  path_provider: ^2.0.11
  permission_handler: ^11.3.0
  audioplayers: ^6.0.0
  swipe_to: ^1.0.2
  story_view: ^0.16.0
  agora_uikit: ^1.0.2
  google_fonts: ^5.1.0
  carousel_slider: ^4.2.1
  typicons_flutter: ^0.5.0
  tabler_icons: ^2.5.0+1
  url_launcher: ^6.2.5
  google_nav_bar: ^5.0.6
  introduction_screen: ^3.1.14
  firebase_database: ^10.4.11
  shared_preferences: ^2.0.15
  

  font_awesome_flutter: ^10.5.0
  google_sign_in: ^6.1.4
  flutter_holo_date_picker: ^1.1.0
  timeline_tile: ^2.0.0
  flutter_timeline_calendar: ^1.0.9
  shimmer: ^3.0.0
  image_cropper: ^5.0.0
  floating_snackbar: ^1.0.3+1
  geolocator: ^11.0.0
  maps_launcher: ^2.2.0
  settings_ui: ^2.0.2
  flutter_svg: ^2.0.10+1
  day_night_time_picker: 
  text_scroll: ^0.2.0
  alarm: ^1.2.2
  build_runner: ^2.4.7
  
  # awesome_notifications: any
  localstorage: ^4.0.1+4
  multi_dropdown: ^2.0.1
  weekday_selector: ^1.1.0
  custom_radio_grouped_button: ^2.2.0
  intl_translation: 
  week_of_year: ^2.2.0
  webview_flutter: ^4.4.2

  confetti: any
  flutter_spinkit: any
  flutter_vector_icons: any
  auth_buttons: ^1.0.1+4
  fluttertoast: any



  firebase_auth: ^4.7.2

  firebase_core : ^2.15.0
  speech_to_text: ^6.6.0
  zego_uikit_prebuilt_video_conference: ^2.6.4
  animate_do: ^3.1.2
  flutter_dotenv: ^5.1.0
  flutter_tts: ^4.0.2
  http: ^1.1.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0
  flutter_launcher_icons: ^0.13.1
  flutter_native_splash: ^2.3.2

flutter_native_splash:
  # This package generates native code to customize Flutter's default white native splash screen
  # with background color and splash image.
  # Customize the parameters below, and run the following command in the terminal:
  # dart run flutter_native_splash:create
  # To restore Flutter's default white splash screen, run the following command in the terminal:
  # dart run flutter_native_splash:remove

  # color or background_image is the only required parameter.  Use color to set the background
  # of your splash screen to a solid color.  Use background_image to set the background of your
  # splash screen to a png image.  This is useful for gradients. The image will be stretch to the
  # size of the app. Only one parameter can be used, color and background_image cannot both be set.
  # color: "#00677a"
  color: "#f1fafb"
  # background_image: "lib/assets/LogO.png"

  # Optional parameters are listed below.  To enable a parameter, uncomment the line by removing
  # the leading # character.

  # The image parameter allows you to specify an image used in the splash screen.  It must be a
  # png file and should be sized for 4x pixel density.
  image: assets/images/MyMeds.png

  # The branding property allows you to specify an image used as branding in the splash screen.
  # It must be a png file. It is supported for Android, iOS and the Web.  For Android 12,
  # see the Android 12 section below.
  # branding: assets/images/MyMeds.gif

  # To position the branding image at the bottom of the screen you can use bottom, bottomRight,
  # and bottomLeft. The default values is bottom if not specified or specified something else.
  #branding_mode: bottom

  # The color_dark, background_image_dark, image_dark, branding_dark are parameters that set the background
  # and image when the device is in dark mode. If they are not specified, the app will use the
  # parameters from above. If the image_dark parameter is specified, color_dark or
  # background_image_dark must be specified.  color_dark and background_image_dark cannot both be
  # set.
  color_dark: "#f1fafb"
  #background_image_dark: "assets/dark-background.png"
  image_dark: assets/images/LogO.png

  #branding_dark: assets/dart_dark.png

  # Android 12 handles the splash screen differently than previous versions.  Please visit
  # https://developer.android.com/guide/topics/ui/splash-screen
  # Following are Android 12 specific parameter.
  android_12:
    # The image parameter sets the splash screen icon image.  If this parameter is not specified,
    # the app's launcher icon will be used instead.
    # Please note that the splash screen will be clipped to a circle on the center of the screen.
    # App icon with an icon background: This should be 960×960 pixels, and fit within a circle
    # 640 pixels in diameter.
    # App icon without an icon background: This should be 1152×1152 pixels, and fit within a circle
    # 768 pixels in diameter.
    image: assets/images/LogO.png
    # Splash screen background color.
    color: "#f1fafb"

    # App icon background color.
    #icon_background_color: "#f1fafb"

    # The branding property allows you to specify an image used as branding in the splash screen.
    #branding: assets/dart.png

    # The image_dark, color_dark, icon_background_color_dark, and branding_dark set values that
    # apply when the device is in dark mode. If they are not specified, the app will use the
    # parameters from above.
    image_dark: assets/images/LogO.png
    color_dark: "#f1fafb"
    #icon_background_color_dark: "#eeeeee"

  # The android, ios and web parameters can be used to disable generating a splash screen on a given
  # platform.
  #android: false
  #ios: false
  #web: false

  # Platform specific images can be specified with the following parameters, which will override
  # the respective parameter.  You may specify all, selected, or none of these parameters:
  #color_android: "#42a5f5"
  #color_dark_android: "#042a49"
  #color_ios: "#42a5f5"
  #color_dark_ios: "#042a49"
  #color_web: "#42a5f5"
  #color_dark_web: "#042a49"
  #image_android: assets/splash-android.png
  #image_dark_android: assets/splash-invert-android.png
  #image_ios: assets/splash-ios.png
  #image_dark_ios: assets/splash-invert-ios.png
  #image_web: assets/splash-web.gif
  #image_dark_web: assets/splash-invert-web.gif
  #background_image_android: "assets/background-android.png"
  #background_image_dark_android: "assets/dark-background-android.png"
  #background_image_ios: "assets/background-ios.png"
  #background_image_dark_ios: "assets/dark-background-ios.png"
  #background_image_web: "assets/background-web.png"
  #background_image_dark_web: "assets/dark-background-web.png"
  #branding_android: assets/brand-android.png
  #branding_dark_android: assets/dart_dark-android.png
  #branding_ios: assets/brand-ios.gif
  #branding_dark_ios: assets/dart_dark-ios.gif

  # The position of the splash image can be set with android_gravity, ios_content_mode, and
  # web_image_mode parameters.  All default to center.
  #
  # android_gravity can be one of the following Android Gravity (see
  # https://developer.android.com/reference/android/view/Gravity): bottom, center,
  # center_horizontal, center_vertical, clip_horizontal, clip_vertical, end, fill, fill_horizontal,
  # fill_vertical, left, right, start, or top.
  #android_gravity: center
  #
  # ios_content_mode can be one of the following iOS UIView.ContentMode (see
  # https://developer.apple.com/documentation/uikit/uiview/contentmode): scaleToFill,
  # scaleAspectFit, scaleAspectFill, center, top, bottom, left, right, topLeft, topRight,
  # bottomLeft, or bottomRight.
  #ios_content_mode: center
  #
  # web_image_mode can be one of the following modes: center, contain, stretch, and cover.
  #web_image_mode: center

  # The screen orientation can be set in Android with the android_screen_orientation parameter.
  # Valid parameters can be found here:
  # https://developer.android.com/guide/topics/manifest/activity-element#screen
  #android_screen_orientation: sensorLandscape

  # To hide the notification bar, use the fullscreen parameter.  Has no effect in web since web
  # has no notification bar.  Defaults to false.
  # NOTE: Unlike Android, iOS will not automatically show the notification bar when the app loads.
  #       To show the notification bar, add the following code to your Flutter app:
  #       WidgetsFlutterBinding.ensureInitialized();
  #       SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: [SystemUiOverlay.bottom, SystemUiOverlay.top], );
  fullscreen: true

  # If you have changed the name(s) of your info.plist file(s), you can specify the filename(s)
  # with the info_plist_files parameter.  Remove only the # characters in the three lines below,
  # do not remove any spaces:
  #info_plist_files:
  #  - 'ios/Runner/Info-Debug.plist'
  #  - 'ios/Runner/Info-Release.plist'


flutter_launcher_icons:
  image_path: "lib/assets/LogO.png"
  android: "launcher_icon"
  ios: true

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  generate: true
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/
    - lib/assets/
    - lib/assets/images/ 
    - lib/assets/icons/
    - lib/l10n/
    - assets/icons/
    - assets/img/
    - assets/images/
    - assets/icon/
    - images/
    - ProblemImages/
    - lib/assets/mede.png
    - .env

    
    - assets/audio/
    


  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages

fonts:
    - family: Quicksand
      fonts:
        - asset: fonts/Quicksand-SemiBold.ttf
        - asset: fonts/Quicksand-Bold.ttf
          weight: 900

    - family: Montserrat
      fonts:
        - asset: fonts/Montserrat/Montserrat-Regular.ttf
        - asset: fonts/Montserrat/Montserrat-ExtraBold.ttf
          weight: 900
    - family: Cera Pro
      fonts:
        - asset: assets/fonts/Cera-Pro-Bold.otf
        - asset: assets/fonts/Cera-Pro-Medium.otf